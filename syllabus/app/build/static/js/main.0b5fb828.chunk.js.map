{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","StyleSheet","create","page","flexDirection","backgroundColor","section","margin","padding","flexGrow","App","useState","Fragment","Navbar","bg","expand","className","Brand","href","Toggle","aria-controls","Collapse","id","Nav","NavDropdown","title","Item","Divider","onClick","a","fetch","data","json","console","log","Accordion","Card","Header","as","Button","variant","eventKey","Body","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b5fb828.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Navbar, Nav, NavItem, NavDropdown, MenuItem } from 'react-bootstrap';\nimport { Accordion, Card, Button } from 'react-bootstrap';\nimport { Page, Text, View, Document, StyleSheet } from '@react-pdf/renderer';\n\nconst styles = StyleSheet.create({\n  page: {\n    flexDirection: 'row',\n    backgroundColor: '#E4E4E4'\n  },\n  section: {\n    margin: 10,\n    padding: 10,\n    flexGrow: 1\n  }\n});\n\nconst MyDocument = () => (\n  <Document>\n    <Page size=\"A4\" style={styles.page}>\n      <View style={styles.section}>\n        <Text>Section #1</Text>\n      </View>\n      <View style={styles.section}>\n        <Text>Section #2</Text>\n      </View>\n    </Page>\n  </Document>\n);\n\nfunction App() {\n  let [data, setData] = useState({});\n  return (\n    //navigationBar at the top\n    <React.Fragment>\n      <Navbar bg=\"light\" expand=\"lg\" className = \"menu\">\n        <Navbar.Brand href=\"#home\" className=\"mainTitle\"> MyUTSyllabus</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            {/* <Nav.Link href=\"#home\">Home</Nav.Link>\n            <Nav.Link href=\"#link\">Link</Nav.Link> */}\n            <NavDropdown title=\"Doe. J\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">Logout</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.2\">Change Account</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.3\">Different Class</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.4\"> Your Schedule </NavDropdown.Item>\n              <NavDropdown.Item onClick={async () => {\n                let data = await fetch('/lecture/stuff');\n                let json = await data.json();\n                console.log(json);\n              }}> Load Data </NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <h1 className = \"titleOfClass\"> Math 408M: Nicolas Reyes</h1>\n      <div className = \"flex-acc-pdf\">\n        <div className = \"flex-acc\">\n          <Accordion className = \"accordian\">\n            <Card>\n              <Card.Header>\n                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                  Summary Information\n            </Accordion.Toggle>\n              </Card.Header>\n              <Accordion.Collapse eventKey=\"0\">\n                <Card.Body>ENTER RELEVANT INFORMATION</Card.Body>\n              </Accordion.Collapse>\n            </Card>\n            <Card>\n              <Card.Header>\n                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n                  Contact Info/Office Hours\n            </Accordion.Toggle>\n              </Card.Header>\n              <Accordion.Collapse eventKey=\"1\">\n                <Card.Body>ENTER RELEVANT INFORMATIONy</Card.Body>\n              </Accordion.Collapse>\n            </Card>\n            <Card>\n              <Card.Header>\n                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"2\">\n                  Ratings\n            </Accordion.Toggle>\n              </Card.Header>\n              <Accordion.Collapse eventKey=\"2\">\n                <Card.Body>ENTER RELEVANT INFORMATION</Card.Body>\n              </Accordion.Collapse>\n            </Card>\n            <Card>\n              <Card.Header>\n                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"3\">\n                  Tests and Quizzes\n            </Accordion.Toggle>\n              </Card.Header>\n              <Accordion.Collapse eventKey=\"3\">\n                <Card.Body>ENTER RELEVANT INFORMATION</Card.Body>\n              </Accordion.Collapse>\n            </Card>\n            <Card>\n              <Card.Header>\n                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"4\">\n                  Homework and Assignments\n            </Accordion.Toggle>\n              </Card.Header>\n              <Accordion.Collapse eventKey=\"4\">\n                <Card.Body>ENTER RELEVANT INFORMATION</Card.Body>\n              </Accordion.Collapse>\n            </Card>\n            <Card>\n              <Card.Header>\n                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"5\">\n                  Grading Policy and Distribution\n            </Accordion.Toggle>\n              </Card.Header>\n              <Accordion.Collapse eventKey=\"5\">\n                <Card.Body>ENTER RELEVANT INFORMATION</Card.Body>\n              </Accordion.Collapse>\n            </Card>\n            <Card>\n              <Card.Header>\n                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"6\">\n                  Required Materials\n            </Accordion.Toggle>\n              </Card.Header>\n              <Accordion.Collapse eventKey=\"6\">\n                <Card.Body>ENTER RELEVANT INFORMATION</Card.Body>\n              </Accordion.Collapse>\n            </Card>\n          </Accordion>\n          </div>\n      </div>\n    </React.Fragment>\n  );\n  // I think this should be it for rendering the syllabus, once you enter the directory name. LET ME KNOW if it doesn't work\n  // After yout get it to work, you shoudl just be able to enter the flexbox specifications under App.CSS. \n  // ReactPDF.render(<MyDocument />, `${__dirname}/example.pdf`);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}